"""
Servo Controller - Contr√¥leur principal du syst√®me de trading servo.

Orchestre:
1. Trading Servo
2. Risk Manager
3. Performance Monitor
4. Alert System
5. Configuration Management
"""

import asyncio
import threading
import time
from typing import Dict, List, Optional, Any
from loguru import logger
from datetime import datetime
import yaml
import os
import signal
import sys

from servo.trading_servo import TradingServo
from servo.risk_manager import RiskManager

class ServoController:
    """Contr√¥leur principal du servo de trading."""
    
    def __init__(self, config_path: str = "config.yaml", mode: str = "paper"):
        """
        Initialise le contr√¥leur.
        
        Args:
            config_path: Chemin vers le fichier de configuration
            mode: Mode de trading ("paper", "live", "backtest")
        """
        # Chargement de la configuration
        with open(config_path, 'r') as f:
            self.config = yaml.safe_load(f)
            
        self.mode = mode
            
        # Composants du servo
        self.trading_servo = None
        self.risk_manager = None
        
        # √âtat du syst√®me
        self.is_running = False
        self.start_time = None
        
        # Threads
        self.main_thread = None
        self.monitoring_thread = None
        
        # Gestion des signaux
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        logger.info(f"Servo Controller initialis√© en mode {mode}")
        
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signaux syst√®me."""
        logger.info(f"Signal re√ßu: {signum}")
        self.stop()
        
    def start(self) -> None:
        """D√©marre le syst√®me de trading."""
        if self.is_running:
            logger.warning("Le syst√®me est d√©j√† en cours d'ex√©cution")
            return
            
        try:
            logger.info("üöÄ D√©marrage du syst√®me de trading servo...")
            
            # Initialisation des composants
            self._initialize_components()
            
            # V√©rifications pr√©liminaires
            if not self._preflight_checks():
                logger.error("‚ùå √âchec des v√©rifications pr√©liminaires")
                return
                
            # D√©marrage du syst√®me
            self.is_running = True
            self.start_time = datetime.now()
            
            # D√©marrage des threads
            self._start_threads()
            
            logger.info("‚úÖ Syst√®me de trading servo d√©marr√© avec succ√®s")
            
            # Boucle principale
            self._main_loop()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©marrage: {e}")
            self.stop()
            
    def _initialize_components(self) -> None:
        """Initialise les composants du syst√®me."""
        logger.info("Initialisation des composants...")
        
        # Risk Manager - pass config dict
        self.risk_manager = RiskManager(self.config)
        logger.info("‚úÖ Risk Manager initialis√©")
        
        # Trading Servo - pass config dict and mode
        self.trading_servo = TradingServo(self.config, self.mode)
        logger.info("‚úÖ Trading Servo initialis√©")
        # Start the main trading loop in a background thread
        self.trading_servo_thread = threading.Thread(target=self.trading_servo.start, daemon=True)
        self.trading_servo_thread.start()
        logger.info("üü¢ Trading Servo main loop started in background thread")
        
    def _preflight_checks(self) -> bool:
        """V√©rifications pr√©liminaires avant d√©marrage."""
        logger.info("V√©rifications pr√©liminaires...")
        
        # V√©rification de la configuration
        if not self._check_configuration():
            return False
            
        # V√©rification des mod√®les
        if not self._check_models():
            return False
            
        # V√©rification de la connexion broker
        if not self._check_broker_connection():
            return False
            
        # V√©rification des permissions
        if not self._check_permissions():
            return False
            
        logger.info("‚úÖ Toutes les v√©rifications pr√©liminaires r√©ussies")
        return True
        
    def _check_configuration(self) -> bool:
        """V√©rifie la configuration."""
        required_sections = ['broker', 'trading', 'execution', 'monitoring']
        
        for section in required_sections:
            if section not in self.config:
                logger.error(f"Section manquante dans la configuration: {section}")
                return False
                
        # V√©rification des param√®tres critiques
        broker_config = self.config['broker']
        if not broker_config.get('login') or not broker_config.get('server'):
            logger.error("Configuration broker incompl√®te")
            return False
            
        return True
        
    def _check_models(self) -> bool:
        """V√©rifie la pr√©sence des mod√®les entra√Æn√©s."""
        model_files = [
            "models/saved/ml_model.joblib",
            "models/saved/regime_detector.joblib",
            "models/saved/feature_engineer.joblib"
        ]
        
        for model_file in model_files:
            if not os.path.exists(model_file):
                logger.warning(f"Mod√®le non trouv√©: {model_file}")
                # Continue sans arr√™ter le syst√®me
                
        return True
        
    def _check_broker_connection(self) -> bool:
        """V√©rifie la connexion au broker."""
        try:
            # Test de connexion via le trading servo
            if self.trading_servo and self.trading_servo.order_manager:
                account_info = self.trading_servo.order_manager.get_account_info()
                if account_info:
                    logger.info(f"‚úÖ Connexion broker OK - Compte: {account_info.get('login', 'N/A')}")
                    return True
                    
            logger.warning("‚ö†Ô∏è Connexion broker non v√©rifi√©e")
            return True  # Continue m√™me sans v√©rification
            
        except Exception as e:
            logger.error(f"‚ùå Erreur de connexion broker: {e}")
            return False
            
    def _check_permissions(self) -> bool:
        """V√©rifie les permissions syst√®me."""
        # V√©rification des dossiers de logs
        log_dirs = ['logs', 'reports', 'data']
        
        for log_dir in log_dirs:
            if not os.path.exists(log_dir):
                try:
                    os.makedirs(log_dir)
                    logger.info(f"Dossier cr√©√©: {log_dir}")
                except Exception as e:
                    logger.error(f"Impossible de cr√©er le dossier {log_dir}: {e}")
                    return False
                    
        return True
        
    def _start_threads(self) -> None:
        """D√©marre les threads de monitoring."""
        # Thread de monitoring principal
        self.monitoring_thread = threading.Thread(
            target=self._monitoring_loop,
            daemon=True
        )
        self.monitoring_thread.start()
        
        logger.info("‚úÖ Threads de monitoring d√©marr√©s")
        
    def _main_loop(self) -> None:
        """Boucle principale du contr√¥leur."""
        logger.info("üîÑ D√©marrage de la boucle principale...")
        
        try:
            while self.is_running:
                # V√©rification du statut du syst√®me
                if not self._check_system_status():
                    logger.error("‚ùå Probl√®me d√©tect√© dans le syst√®me")
                    break
                    
                # Mise √† jour des m√©triques
                self._update_system_metrics()
                
                # Log du statut
                self._log_system_status()
                
                time.sleep(10)  # V√©rification toutes les 10 secondes
                
        except KeyboardInterrupt:
            logger.info("Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            logger.error(f"Erreur dans la boucle principale: {e}")
        finally:
            self.stop()
            
    def _monitoring_loop(self) -> None:
        """Boucle de monitoring."""
        while self.is_running:
            try:
                # Monitoring du risk manager
                if self.risk_manager:
                    risk_metrics = self.risk_manager.get_risk_metrics()
                    risk_level = self.risk_manager.get_risk_level()
                    
                    # Alertes de risque
                    if not self.risk_manager.is_risk_ok:
                        logger.warning(f"üö® ALERTE RISQUE: Niveau {risk_level.name}")
                        
                # Monitoring du trading servo
                if self.trading_servo:
                    servo_status = self.trading_servo.get_status()
                    
                    # V√©rification des positions
                    positions = self.trading_servo.get_positions()
                    if len(positions) > 0:
                        logger.info(f"Positions ouvertes: {len(positions)}")
                        
                time.sleep(30)  # Monitoring toutes les 30 secondes
                
            except Exception as e:
                logger.error(f"Erreur dans le monitoring: {e}")
                
    def _check_system_status(self) -> bool:
        """V√©rifie le statut du syst√®me."""
        # V√©rification du risk manager
        if self.risk_manager and not self.risk_manager.is_risk_ok:
            logger.error("‚ùå Risk Manager signale un probl√®me")
            return False
            
        # V√©rification du trading servo
        if self.trading_servo and not self.trading_servo.is_running:
            logger.error("‚ùå Trading Servo n'est plus en cours d'ex√©cution")
            return False
            
        return True
        
    def _update_system_metrics(self) -> None:
        """Met √† jour les m√©triques syst√®me."""
        # M√©triques de performance
        if self.trading_servo:
            performance = self.trading_servo.performance_metrics
            # TODO: Stocker et analyser les m√©triques
            
        # M√©triques de risque
        if self.risk_manager:
            risk_metrics = self.risk_manager.get_risk_metrics()
            # TODO: Stocker et analyser les m√©triques de risque
            
    def _log_system_status(self) -> None:
        """Log le statut du syst√®me."""
        if not self.is_running:
            return
            
        uptime = datetime.now() - self.start_time if self.start_time else timedelta(0)
        
        # Statut du trading servo
        servo_status = "üü¢" if (self.trading_servo and self.trading_servo.is_running) else "üî¥"
        
        # Statut du risk manager
        risk_status = "üü¢" if (self.risk_manager and self.risk_manager.is_risk_ok) else "üî¥"
        
        # Positions ouvertes
        positions_count = len(self.trading_servo.get_positions()) if self.trading_servo else 0
        
        logger.info(
            f"üìä STATUT SYST√àME | "
            f"Uptime: {uptime} | "
            f"Servo: {servo_status} | "
            f"Risk: {risk_status} | "
            f"Positions: {positions_count}"
        )
        
    def stop(self) -> None:
        """Arr√™te le syst√®me de trading."""
        if not self.is_running:
            return
            
        logger.info("üõë Arr√™t du syst√®me de trading servo...")
        
        self.is_running = False
        
        # Arr√™t du trading servo
        if self.trading_servo:
            self.trading_servo.stop()
            logger.info("‚úÖ Trading Servo arr√™t√©")
            
        # Arr√™t du risk manager
        if self.risk_manager:
            self.risk_manager.shutdown()
            logger.info("‚úÖ Risk Manager arr√™t√©")
            
        # Attente des threads
        if self.monitoring_thread:
            self.monitoring_thread.join(timeout=10)
            
        logger.info("‚úÖ Syst√®me de trading servo arr√™t√©")
        
    def get_system_status(self) -> Dict[str, Any]:
        """Retourne le statut complet du syst√®me."""
        status = {
            'is_running': self.is_running,
            'start_time': self.start_time,
            'uptime': datetime.now() - self.start_time if self.start_time else None
        }
        
        # Statut du trading servo
        if self.trading_servo:
            status['trading_servo'] = self.trading_servo.get_status()
            
        # Statut du risk manager
        if self.risk_manager:
            status['risk_manager'] = {
                'is_risk_ok': self.risk_manager.is_risk_ok,
                'risk_level': self.risk_manager.get_risk_level().name,
                'risk_metrics': self.risk_manager.get_risk_metrics().__dict__
            }
            
        return status
        
    def emergency_stop(self) -> None:
        """Arr√™t d'urgence du syst√®me."""
        logger.critical("üö® ARR√äT D'URGENCE DU SYST√àME")
        
        # Force l'arr√™t du trading
        if self.trading_servo:
            self.trading_servo._close_all_positions()
            
        # Force l'arr√™t du risk manager
        if self.risk_manager:
            self.risk_manager.force_stop_trading()
            
        # Arr√™t complet
        self.stop()
        
    def restart(self) -> None:
        """Red√©marre le syst√®me."""
        logger.info("üîÑ Red√©marrage du syst√®me...")
        
        self.stop()
        time.sleep(5)  # Attente avant red√©marrage
        self.start()
        
    def get_performance_report(self) -> Dict[str, Any]:
        """G√©n√®re un rapport de performance."""
        report = {
            'timestamp': datetime.now(),
            'system_status': self.get_system_status(),
            'performance_metrics': {},
            'risk_metrics': {},
            'positions': {},
            'signals': {}
        }
        
        # M√©triques de performance du trading servo
        if self.trading_servo:
            report['performance_metrics'] = self.trading_servo.performance_metrics
            report['positions'] = {
                symbol: {
                    'side': pos.side,
                    'volume': pos.volume,
                    'entry_price': pos.entry_price,
                    'entry_time': pos.entry_time,
                    'regime': pos.regime,
                    'confidence': pos.signal_confidence
                }
                for symbol, pos in self.trading_servo.get_positions().items()
            }
            report['signals'] = {
                'total_signals': len(self.trading_servo.get_signal_history()),
                'last_signal': self.trading_servo.get_signal_history()[-1].__dict__ if self.trading_servo.get_signal_history() else None
            }
            
        # M√©triques de risque
        if self.risk_manager:
            report['risk_metrics'] = self.risk_manager.get_risk_metrics().__dict__
            
        return report

def main():
    """Fonction principale pour d√©marrer le servo controller."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Trading Servo Controller')
    parser.add_argument('--config', default='config.yaml', help='Chemin vers le fichier de configuration')
    parser.add_argument('--log-level', default='INFO', help='Niveau de log')
    
    args = parser.parse_args()
    
    # Configuration du logger
    logger.remove()
    logger.add(
        sys.stdout,
        level=args.log_level,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
    )
    logger.add(
        "logs/servo_controller.log",
        rotation="10 MB",
        retention="7 days",
        level=args.log_level
    )
    
    # D√©marrage du contr√¥leur
    controller = ServoController(args.config)
    
    try:
        controller.start()
    except KeyboardInterrupt:
        logger.info("Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur fatale: {e}")
        controller.emergency_stop()
    finally:
        controller.stop()

if __name__ == "__main__":
    main() 